{"ast":null,"code":"import * as actionTypes from '../actions/actionTypes';\nimport { updateObject } from '../utility';\nimport firebase from \"../../firebase/firebase\";\nconst initialState = {\n  items: {},\n  cart: {}\n};\n\nconst pullShopItems = (state, action) => {\n  console.log(action.data);\n  return updateObject(state, {\n    items: action.data\n  });\n};\n\nconst addItem = (state, action) => {\n  console.log(action.size);\n  let updatedAmount = 0; // if (state.cart[action.itemID]){\n  //     console.log(state.cart[action.itemID])\n  //     if (state.cart[action.itemID][action.size]){\n  //         updatedAmount= state.cart[action.itemID][action.size] + action.amount\n  //     } else{\n  //         updatedAmount = action.amount\n  //     }\n\n  if (state.cart[action.itemID] && state.cart[action.itemID][action.size]) {\n    updatedAmount = parseInt(state.cart[action.itemID][action.size]) + parseInt(action.amount);\n  } else {\n    updatedAmount = parseInt(action.amount);\n  }\n\n  return updateObject(state, { ...state,\n    cart: { ...state.cart,\n      [action.itemID]: { ...state.cart[action.itemID],\n        [action.size]: updatedAmount\n      }\n    }\n  });\n};\n\nconst shopReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case actionTypes.PULL_SHOP_ITEMS:\n      return pullShopItems(state, action);\n\n    case actionTypes.ADD_ITEM:\n      return addItem(state, action);\n\n    default:\n      return state;\n  }\n};\n\nexport default shopReducer;","map":{"version":3,"sources":["/Users/Abhinav/Documents/GitHub/saasshop/src/store/reducers/shop.js"],"names":["actionTypes","updateObject","firebase","initialState","items","cart","pullShopItems","state","action","console","log","data","addItem","size","updatedAmount","itemID","parseInt","amount","shopReducer","type","PULL_SHOP_ITEMS","ADD_ITEM"],"mappings":"AAAA,OAAO,KAAKA,WAAZ,MAA6B,wBAA7B;AACA,SAASC,YAAT,QAA6B,YAA7B;AACA,OAAOC,QAAP,MAAqB,yBAArB;AAEA,MAAMC,YAAY,GAAC;AACfC,EAAAA,KAAK,EAAC,EADS;AAEfC,EAAAA,IAAI,EAAC;AAFU,CAAnB;;AAKA,MAAMC,aAAa,GAAG,CAACC,KAAD,EAAQC,MAAR,KAAmB;AACrCC,EAAAA,OAAO,CAACC,GAAR,CAAYF,MAAM,CAACG,IAAnB;AACA,SAAOV,YAAY,CAACM,KAAD,EAAQ;AAAEH,IAAAA,KAAK,EAAEI,MAAM,CAACG;AAAhB,GAAR,CAAnB;AACD,CAHH;;AAKA,MAAMC,OAAO,GAAG,CAACL,KAAD,EAAQC,MAAR,KAAmB;AAC/BC,EAAAA,OAAO,CAACC,GAAR,CAAYF,MAAM,CAACK,IAAnB;AACA,MAAIC,aAAa,GAAG,CAApB,CAF+B,CAG/B;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,MAAIP,KAAK,CAACF,IAAN,CAAWG,MAAM,CAACO,MAAlB,KAA6BR,KAAK,CAACF,IAAN,CAAWG,MAAM,CAACO,MAAlB,EAA0BP,MAAM,CAACK,IAAjC,CAAjC,EAAwE;AACpEC,IAAAA,aAAa,GAAEE,QAAQ,CAACT,KAAK,CAACF,IAAN,CAAWG,MAAM,CAACO,MAAlB,EAA0BP,MAAM,CAACK,IAAjC,CAAD,CAAR,GAAmDG,QAAQ,CAACR,MAAM,CAACS,MAAR,CAA1E;AACH,GAFD,MAEK;AACDH,IAAAA,aAAa,GAAGE,QAAQ,CAACR,MAAM,CAACS,MAAR,CAAxB;AACH;;AACD,SAAOhB,YAAY,CAAEM,KAAF,EAAS,EACxB,GAAGA,KADqB;AAExBF,IAAAA,IAAI,EAAE,EACF,GAAGE,KAAK,CAACF,IADP;AAEF,OAACG,MAAM,CAACO,MAAR,GAAiB,EACb,GAAGR,KAAK,CAACF,IAAN,CAAWG,MAAM,CAACO,MAAlB,CADU;AAEb,SAACP,MAAM,CAACK,IAAR,GAAeC;AAFF;AAFf;AAFkB,GAAT,CAAnB;AAUH,CAzBD;;AA4BA,MAAMI,WAAW,GAAG,CAAEX,KAAK,GAAGJ,YAAV,EAAwBK,MAAxB,KAAoC;AACpD,UAASA,MAAM,CAACW,IAAhB;AACI,SAAKnB,WAAW,CAACoB,eAAjB;AAAkC,aAAOd,aAAa,CAACC,KAAD,EAAOC,MAAP,CAApB;;AAClC,SAAKR,WAAW,CAACqB,QAAjB;AAA2B,aAAOT,OAAO,CAACL,KAAD,EAAQC,MAAR,CAAd;;AAC3B;AACI,aAAOD,KAAP;AAJR;AAMH,CAPD;;AASA,eAAeW,WAAf","sourcesContent":["import * as actionTypes from '../actions/actionTypes';\nimport { updateObject } from '../utility';\nimport firebase from \"../../firebase/firebase\";\n\nconst initialState={\n    items:{},\n    cart:{}\n}\n\nconst pullShopItems = (state, action) => {\n    console.log(action.data)\n    return updateObject(state, { items: action.data });\n  };\n\nconst addItem = (state, action) => {\n    console.log(action.size)\n    let updatedAmount = 0\n    // if (state.cart[action.itemID]){\n    //     console.log(state.cart[action.itemID])\n    //     if (state.cart[action.itemID][action.size]){\n    //         updatedAmount= state.cart[action.itemID][action.size] + action.amount\n    //     } else{\n    //         updatedAmount = action.amount\n    //     }\n    if (state.cart[action.itemID] && state.cart[action.itemID][action.size]){\n        updatedAmount= parseInt(state.cart[action.itemID][action.size]) + parseInt(action.amount)\n    }else{\n        updatedAmount = parseInt(action.amount)\n    }\n    return updateObject( state, {\n        ...state,\n        cart: {\n            ...state.cart,\n            [action.itemID]: {\n                ...state.cart[action.itemID],\n                [action.size]: updatedAmount\n            }\n        }\n    });\n};\n\n\nconst shopReducer = ( state = initialState, action ) => {\n    switch ( action.type ) { \n        case actionTypes.PULL_SHOP_ITEMS: return pullShopItems(state,action);\n        case actionTypes.ADD_ITEM: return addItem(state, action);\n        default:\n            return state;\n    }\n};\n\nexport default shopReducer;"]},"metadata":{},"sourceType":"module"}